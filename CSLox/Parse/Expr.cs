// This file is auto-generated by GenerateAST. Do not edit it manually.
using CSLox.Scan;
namespace CSLox.Parse;
abstract class Expr
{
    public interface IVisitor<out T>
    {
        T VisitAssign(Assign expr);
        T VisitBinary(Binary expr);
        T VisitCall(Call expr);
        T VisitGet(Get expr);
        T VisitGrouping(Grouping expr);
        T VisitLiteral(Literal expr);
        T VisitLogical(Logical expr);
        T VisitSet(Set expr);
        T VisitSuper(Super expr);
        T VisitThis(This expr);
        T VisitUnary(Unary expr);
        T VisitVariable(Variable expr);
    }
    public abstract T Accept<T>(IVisitor<T> visitor);
}

class Assign : Expr
{
    public Token name;
    public Expr value;

    public Assign(Token name, Expr value)
    {
        this.name = name;
        this.value = value;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitAssign(this);
    }
}
class Binary : Expr
{
    public Expr left;
    public Token operatorToken;
    public Expr right;

    public Binary(Expr left, Token operatorToken, Expr right)
    {
        this.left = left;
        this.operatorToken = operatorToken;
        this.right = right;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitBinary(this);
    }
}
class Call : Expr
{
    public Expr callee;
    public Token paren;
    public List<Expr> arguments;

    public Call(Expr callee, Token paren, List<Expr> arguments)
    {
        this.callee = callee;
        this.paren = paren;
        this.arguments = arguments;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitCall(this);
    }
}
class Get : Expr
{
    public Expr exprObject;
    public Token name;

    public Get(Expr exprObject, Token name)
    {
        this.exprObject = exprObject;
        this.name = name;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitGet(this);
    }
}
class Grouping : Expr
{
    public Expr expression;

    public Grouping(Expr expression)
    {
        this.expression = expression;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitGrouping(this);
    }
}
class Literal : Expr
{
    public object value;

    public Literal(object value)
    {
        this.value = value;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitLiteral(this);
    }
}
class Logical : Expr
{
    public Expr left;
    public Token operatorToken;
    public Expr right;

    public Logical(Expr left, Token operatorToken, Expr right)
    {
        this.left = left;
        this.operatorToken = operatorToken;
        this.right = right;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitLogical(this);
    }
}
class Set : Expr
{
    public Expr exprObject;
    public Token name;
    public Expr value;

    public Set(Expr exprObject, Token name, Expr value)
    {
        this.exprObject = exprObject;
        this.name = name;
        this.value = value;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitSet(this);
    }
}
class Super : Expr
{
    public Token keyword;
    public Token method;

    public Super(Token keyword, Token method)
    {
        this.keyword = keyword;
        this.method = method;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitSuper(this);
    }
}
class This : Expr
{
    public Token keyword;

    public This(Token keyword)
    {
        this.keyword = keyword;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitThis(this);
    }
}
class Unary : Expr
{
    public Token operatorToken;
    public Expr right;

    public Unary(Token operatorToken, Expr right)
    {
        this.operatorToken = operatorToken;
        this.right = right;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitUnary(this);
    }
}
class Variable : Expr
{
    public Token name;

    public Variable(Token name)
    {
        this.name = name;
    }
    public override T Accept<T>(IVisitor<T> visitor)
    {
        return visitor.VisitVariable(this);
    }
}
