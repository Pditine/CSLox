using System.Text;

namespace GenerateAST;

internal abstract class ASTGenerater
{
    static void Main(string[] args)
    {
        List<string> exprTypes =
        [
            "Assign : Token name, Expr value",
            "Binary : Expr left, Token operatorToken, Expr right",
            "Call : Expr callee, Token paren, List<Expr> arguments",
            "Get : Expr exprObject, Token name",
            "Grouping : Expr expression",
            "Literal : object value",
            "Logical : Expr left, Token operatorToken, Expr right",
            "Set : Expr exprObject, Token name, Expr value",
            "Super : Token keyword, Token method",
            "This : Token keyword",
            "Unary : Token operatorToken, Expr right",
            "Variable : Token name"
        ];
        List<string> stmtTypes =
        [
            "Block : List<Stmt> statements",
            "Class : Token name, Variable superclass, List<Function> methods",
            "Expression : Expr expression",
            "Function : Token name, List<Token> parameters, List<Stmt> body", 
            "If : Expr condition, Stmt thenBranch, Stmt elseBranch", 
            "Print : Expr expression",
            "Return : Token keyword, Expr value",
            "Var : Token name, Expr initializer",
            "While : Expr condition, Stmt body"
        ];
#if DEBUG
        string debugOutputDir = "../../../../CSLox/Parse";
        DefineAst(debugOutputDir, "Expr", exprTypes);
        DefineAst(debugOutputDir, "Stmt", stmtTypes); 
#endif
        if (args.Length != 1) 
        {
            Console.WriteLine("Usage: generate_ast <output directory>"); 
            Environment.Exit(64);
        }
        string outputDir = args[0];
        DefineAst(outputDir, "Expr", exprTypes);
        DefineAst(outputDir, "Stmt", stmtTypes);
    }
    
    private static void DefineAst(string outputDir, string baseName, List<string> types) 
    {
        try
        {
            var path = outputDir + "/" + baseName + ".cs";
            using var writer = new StreamWriter(path, false, Encoding.UTF8);
            writer.WriteLine("// This file is auto-generated by GenerateAST. Do not edit it manually.");
            writer.WriteLine("using CSLox.Scan;");
            writer.WriteLine("namespace CSLox.Parse;");
            writer.WriteLine("abstract class " + baseName);
            writer.WriteLine("{");
            DefineVisitor(writer, baseName, types);
            writer.WriteLine("    public abstract T Accept<T>(IVisitor<T> visitor);");
            writer.WriteLine("}");
            writer.WriteLine();
            
            foreach (string type in types) 
            { 
                string className = type.Split(':')[0].Trim();
                string fields = type.Split(':')[1].Trim();
                DefineType(writer, baseName, className, fields);
            } 
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    private static void DefineType(StreamWriter writer, string baseName, string className, string fieldList) 
    { 
        writer.WriteLine("class " + className + " : " + baseName);
        writer.WriteLine("{");
        foreach (var field in fieldList.Split(','))
        {
            string[] parts = field.Trim().Split(' ');
            string type = parts[0];
            string name = parts[1];
            writer.WriteLine("    public " + type + " " + name + ";");
        }
        writer.WriteLine();
        writer.WriteLine("    public " + className + "(" + fieldList + ")");
        writer.WriteLine("    {");
        foreach (string field in fieldList.Split(',')) 
        {
            string name = field.Trim().Split(' ')[1];
            writer.WriteLine("        this." + name + " = " + name + ";");
        }
        writer.WriteLine("    }");
        writer.WriteLine("    public override T Accept<T>(IVisitor<T> visitor)");
        writer.WriteLine("    {");
        writer.WriteLine("        return visitor.Visit" + className + "(this);");
        writer.WriteLine("    }");
        writer.WriteLine("}");
    }
    
    private static void DefineVisitor(StreamWriter writer, string baseName, List<string> types) 
    { 
        writer.WriteLine("    public interface IVisitor<out T>");
        writer.WriteLine("    {");
        foreach (string type in types) 
        { 
            string className = type.Split(':')[0].Trim();
            writer.WriteLine("        T Visit" + className + "(" + className + " " + baseName.ToLower() + ");");
        } 
        writer.WriteLine("    }");
    }
}